// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/a-aslani",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/a-aslani",
            "email": "a.aslani.dev@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/file-uploader/v1/upload": {
            "post": {
                "description": "uploading file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UploadFile"
                ],
                "summary": "uploading file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "upload file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/upload_file.InportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    }
                }
            }
        },
        "/newsletter/v1/subscribers": {
            "post": {
                "description": "send subscribe to the newsletter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscribe"
                ],
                "summary": "send subscribe to the newsletter",
                "parameters": [
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/restapi.subscribeHandlerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscribe.InportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    }
                }
            }
        },
        "/project/v1/discovery-session": {
            "post": {
                "description": "sending discovery session date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DiscoverySessionRequest"
                ],
                "summary": "send discovery session",
                "parameters": [
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/restapi.discoverySessionRequestHandlerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discovery_session_request.InportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    }
                }
            }
        },
        "/project/v1/discovery-session/calendly": {
            "get": {
                "description": "notify messaging when scheduled session with the Calendly",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CalendlyDiscoverySessionOnScheduled"
                ],
                "summary": "notify scheduled Calendly",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/calendly_discovery_session_on_scheduled.InportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    }
                }
            }
        },
        "/support/v1/contact-us": {
            "post": {
                "description": "sending contact form data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SendContactForm"
                ],
                "summary": "sending contact form",
                "parameters": [
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/send_contact_form.InportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/send_contact_form.InportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "calendly_discovery_session_on_scheduled.InportResponse": {
            "type": "object"
        },
        "discovery_session_request.InportResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "payload.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error_code": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "restapi.discoverySessionRequestHandlerRequest": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_details": {
                    "type": "string"
                },
                "recaptcha_token": {
                    "type": "string"
                }
            }
        },
        "restapi.subscribeHandlerRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "send_contact_form.InportRequest": {
            "type": "object",
            "properties": {
                "apiurl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "now": {
                    "type": "string"
                },
                "recaptchaToken": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "testMode": {
                    "type": "boolean"
                }
            }
        },
        "send_contact_form.InportResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "subscribe.InportResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "upload_file.InportResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8888",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "API Documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
