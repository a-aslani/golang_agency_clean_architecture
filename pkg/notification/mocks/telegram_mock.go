// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/a-aslani/golang_agency_clean_architecture/pkg/notification (interfaces: TelegramBot)
//
// Generated by this command:
//
//	mockgen -destination mocks/telegram_mock.go -package mocktelegram github.com/a-aslani/golang_agency_clean_architecture/pkg/notification TelegramBot
//

// Package mocktelegram is a generated GoMock package.
package mocktelegram

import (
	context "context"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockTelegramBot is a mock of TelegramBot interface.
type MockTelegramBot struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramBotMockRecorder
}

// MockTelegramBotMockRecorder is the mock recorder for MockTelegramBot.
type MockTelegramBotMockRecorder struct {
	mock *MockTelegramBot
}

// NewMockTelegramBot creates a new mock instance.
func NewMockTelegramBot(ctrl *gomock.Controller) *MockTelegramBot {
	mock := &MockTelegramBot{ctrl: ctrl}
	mock.recorder = &MockTelegramBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramBot) EXPECT() *MockTelegramBotMockRecorder {
	return m.recorder
}

// CommandHandling mocks base method.
func (m *MockTelegramBot) CommandHandling(arg0 context.Context, arg1 func(tgbotapi.Update) string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandHandling", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommandHandling indicates an expected call of CommandHandling.
func (mr *MockTelegramBotMockRecorder) CommandHandling(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandHandling", reflect.TypeOf((*MockTelegramBot)(nil).CommandHandling), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockTelegramBot) SendMessage(arg0 context.Context, arg1 int64, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegramBotMockRecorder) SendMessage(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegramBot)(nil).SendMessage), arg0, arg1, arg2, arg3)
}
