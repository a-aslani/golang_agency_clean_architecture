// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/a-aslani/golang_agency_clean_architecture/internal/project/model/contract (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination mocks/repository_mock.go -package mocks github.com/a-aslani/golang_agency_clean_architecture/internal/project/model/contract Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/a-aslani/golang_agency_clean_architecture/internal/project/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindChatIdsByRoles mocks base method.
func (m *MockRepository) FindChatIdsByRoles(arg0 context.Context, arg1 []*entity.Role) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatIdsByRoles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatIdsByRoles indicates an expected call of FindChatIdsByRoles.
func (mr *MockRepositoryMockRecorder) FindChatIdsByRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatIdsByRoles", reflect.TypeOf((*MockRepository)(nil).FindChatIdsByRoles), arg0, arg1)
}

// FindFilesByIDs mocks base method.
func (m *MockRepository) FindFilesByIDs(arg0 context.Context, arg1 []string) ([]*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilesByIDs indicates an expected call of FindFilesByIDs.
func (mr *MockRepositoryMockRecorder) FindFilesByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilesByIDs", reflect.TypeOf((*MockRepository)(nil).FindFilesByIDs), arg0, arg1)
}

// FindRolesByCodes mocks base method.
func (m *MockRepository) FindRolesByCodes(arg0 context.Context, arg1 []string) ([]*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRolesByCodes", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRolesByCodes indicates an expected call of FindRolesByCodes.
func (mr *MockRepositoryMockRecorder) FindRolesByCodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRolesByCodes", reflect.TypeOf((*MockRepository)(nil).FindRolesByCodes), arg0, arg1)
}

// SaveDiscoverySession mocks base method.
func (m *MockRepository) SaveDiscoverySession(arg0 context.Context, arg1 *entity.DiscoverySession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDiscoverySession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDiscoverySession indicates an expected call of SaveDiscoverySession.
func (mr *MockRepositoryMockRecorder) SaveDiscoverySession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDiscoverySession", reflect.TypeOf((*MockRepository)(nil).SaveDiscoverySession), arg0, arg1)
}

// SaveFilePath mocks base method.
func (m *MockRepository) SaveFilePath(arg0 context.Context, arg1 *entity.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilePath", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilePath indicates an expected call of SaveFilePath.
func (mr *MockRepositoryMockRecorder) SaveFilePath(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilePath", reflect.TypeOf((*MockRepository)(nil).SaveFilePath), arg0, arg1)
}

// SaveRole mocks base method.
func (m *MockRepository) SaveRole(arg0 context.Context, arg1 *entity.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRole indicates an expected call of SaveRole.
func (mr *MockRepositoryMockRecorder) SaveRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRole", reflect.TypeOf((*MockRepository)(nil).SaveRole), arg0, arg1)
}

// SaveTelegramChatID mocks base method.
func (m *MockRepository) SaveTelegramChatID(arg0 context.Context, arg1 *entity.TelegramChatID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTelegramChatID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTelegramChatID indicates an expected call of SaveTelegramChatID.
func (mr *MockRepositoryMockRecorder) SaveTelegramChatID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTelegramChatID", reflect.TypeOf((*MockRepository)(nil).SaveTelegramChatID), arg0, arg1)
}
