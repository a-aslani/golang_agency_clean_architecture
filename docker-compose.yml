version: "3.9"

networks:
    app_network:
        driver: bridge

volumes:
    postgres_db:
    mongo_db:
    file_uploader:
    prometheus_data:
    grafana_data:

services:

    reverse-proxy:
        image: nginx:alpine
        volumes:
            - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        ports:
            - "8888:80"
        environment:
            - NGINX_HOST=agency.com
            - NGINX_PORT=80
        depends_on:
            - newsletter_service
            - file_uploader_service
            - support_service
            - project_service
        networks:
            - app_network

    postgres:
        image: postgres:16.1-alpine
        container_name: postgres
        volumes:
            - postgres_db:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: "secret"
            POSTGRES_DB: agency_db
        ports:
            - "5432:5432"
        networks:
            - app_network

    pgadmin4:
        image: dpage/pgadmin4
        container_name: pgadmin4
        restart: always
        environment:
            - PGADMIN_DEFAULT_EMAIL=dba@agency.com
            - PGADMIN_DEFAULT_PASSWORD=secret
        depends_on:
            - postgres
        ports:
            - "4053:80"
        networks:
            - app_network

    migrate:
        image: migrate/migrate
        networks:
            - app_network
        volumes:
            - ./db/migrations:/migrations
        command: [ "-path", "/migrations", "-database",  "postgres://root:secret@postgres:5432/agency_db?sslmode=disable", "up" ]
        links:
            - postgres

    migrate_test:
        image: migrate/migrate
        networks:
            - app_network
        volumes:
            - ./db/migrations:/migrations
        command: [ "-path", "/migrations", "-database",  "postgres://root:secret@postgres:5432/agency_db_test?sslmode=disable", "up" ]
        links:
            - postgres

    prometheus:
        image: prom/prometheus:v2.45.2
        container_name: prometheus
        restart: always
        user: "0"
        volumes:
            - "./docker/prometheus/:/etc/prometheus/"
            - "prometheus_data:/prometheus"
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
            - "--web.enable-lifecycle"
        ports:
            - "9090:9090"
        networks:
            - app_network

    grafana:
        image: grafana/grafana
        container_name: grafana
        depends_on:
            - prometheus
        restart: always
        user: "0"
        ports:
            - "3000:3000"
        volumes:
            - "grafana_data:/var/lib/grafana"
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=secret
            - GF_USERS_ALLOW_SIGN_UP=false
            - GF_PANELS_DISABLE_SANITIZE_HTML=true
            - GF_SECURITY_ALLOW_EMBEDDING=true
        networks:
            - app_network

    swagger:
        container_name: swagger
        build: .
        entrypoint: "./golang_agency_clean_architecture swagger"
        depends_on:
            - postgres
        environment:
            - CONFIG_FILE=config.prod.yml
            - GIN_MODE=release
        networks:
            - app_network

    newsletter_service:
        container_name: newsletter_service
        build: .
        entrypoint: "./golang_agency_clean_architecture newsletter"
        depends_on:
            - postgres
        environment:
            - CONFIG_FILE=config.prod.yml
            - GIN_MODE=release
        networks:
            - app_network

    file_uploader_service:
        container_name: file_uploader_service
        build: .
        entrypoint: "./golang_agency_clean_architecture file_uploader"
        depends_on:
            - postgres
        environment:
            - CONFIG_FILE=config.prod.yml
            - GIN_MODE=release
        volumes:
            - file_uploader:/app/domain_file_uploader/public/upload
        networks:
            - app_network

    support_service:
        container_name: support_service
        build: .
        entrypoint: "./golang_agency_clean_architecture support"
        depends_on:
            - postgres
        environment:
            - CONFIG_FILE=config.prod.yml
            - GIN_MODE=release
        networks:
            - app_network

    project_service:
        container_name: project_service
        build: .
        entrypoint: "./golang_agency_clean_architecture project"
        depends_on:
            - postgres
        environment:
            - CONFIG_FILE=config.prod.yml
            - GIN_MODE=release
        networks:
            - app_network